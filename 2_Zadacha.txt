     ЗАДАНИЯ НА ЛАБОРАТОРНЫЕ РАБОТЫ ПО АССЕМБЛЕРУ
     Второе задание
     
     Задачи
     ------
     Матрицы
      Задачи  этой  группы  предполагают работу с целочисленными  квадратными
матрицами,  хранящимися  в  виде структуры. Способ  представления  матрицы  в
памяти  указывается  в  задании.  С помощью ассемблерных  вставок  необходимо
реализовать  функции: создать матрицу; удалить матрицу;  прочитать,  изменить
элемент,  стоящий на пересечении i-той строки и j-го столбца; печать матрицы;
функции, которая описывается в задании.

  1.    Вычислить  определитель матрицы, разложением по произвольной  строке,
     считая, что матрица хранится в виде одномерного массива.

  2.    Вычислить определитель матрицы, разложением по произвольному столбцу,
     считая, что матрица хранится в виде массивов строк.

  3.   Написать операцию умножения матрицы, считая, что матрица представлена в
     памяти массивом столбцов.

  4.   Среди строк матрицы определить те строки, которые являются перестановкой
     из n символов, где n --- размерность матрицы.

  5.    Транспонировать  матрицу, записав результат  на  место  исходной  без
     заведения дополнительной матрицы. Матрица представлена как массив строк.

  6.   Проверить является ли матрица симметрической, если она хранится в виде
     линейного массива.

  7.    Посчитать  количество  строк матрицы, сумма  элементов  которых  есть
     нечетное число, если матрица хранится в виде массива столбцов.

  8.    Посчитать количество столбцов, все элементы которых меньше по  модулю
     заданного числа. Матрица представлена массивом строк.

     Сортировка и поиск экземпляров структур данных

     Задачи   этой   группы  предполагают  работу  с  массивом  фиксированной
размерности   указателей   на  структуры  определенного   типа.   С   помощью
ассемблерных  вставок  необходимо  написать  функции:  создание  и   удаление
экземпляра структуры; печать экземпляра на экране; сравнение двух экземпляров
по критерию, указанному в задании (если есть); операцию, указанную в задании.

9.   struct Human //Человек
     {
          char Name[30]
          int year;
     };
Сравнение:  Сравниваются  лексикографически  поля  Name,  затем,   в   случае
равенства,  поля  year.  Отсортировать  пузырьковой  сортировкой  в   порядке
убывания.

10.  struct BookCard //Книжная карточка
     {
          char Title[30];
          char Author[30];
     };
Написать  функцию,  которая по двум заданным строкам: имя автора  и  название
книги  (возможно  пустым  или  содержащим  любую  часть  слова)  находит  все
подходящие карточки.

11.  struct BookCard //Книжная карточка
     {
          char Title[30];
          char Author[30];
     };
Сравнение:  сначала  сравниваются поля Author, а затем, в  случае  равенства,
поля  Title.  Удалить из массива все повторные вхождения каждой из  карточек.
После  работы  массив не должен содержать между любыми двумя  указателями  на
карточку указатель, не связанный ни с какой карточкой.

12.  struct Human //Человек
     {
          char Name[30];
          int  date;  //количество  дней от 1  января  1900  года  с  момента
     рождения
     };
Вывести на экран список людей, у которых дни рождения в указанном месяце.

13.  struct Human //Человек
     {
          char Name[30];
          int date;\\количество дней от 1 января 1900 года с момента рождения
     };
Вывести  на экран тех людей, которые родились в один и тот же день  и  месяц,
но, возможно, в разные годы.

14.  struct BookCard //Книжная карточка
     {
          char Title[30];
          char Author[30];
     };
Найти все книги указанного автора и отсортировать их по возрастанию (операция
сравнения та же самая, что и в задаче 11).

15.  struct Shape
     {
          int count; //количество вершин
          int* vertexes;  /*одномерный массив вершин, то есть
                        координаты  каждой  вершины  содержатся  в  элементах
               массива с индексами
                    2n и 2n+1*/
     };
Сравнение: сначала сравниваются поля count, а, в случае равенства, вершины  в
лексикографическом порядке. Отсортировать фигуры по убыванию.

16.  struct date
     {
          int year;
          int month;
          int date;
     };
Отсортировать массив дат по месяцам, а внутри одного месяца, по году и  числу
в порядке убывания.

     Длинные числа

     Задачи  этой  группы  предполагают  работу  с  целыми  длинными  числами
представленными  в  памяти массивом чисел подходящего размера,  указатель  на
которой  хранится  в  структуре.  Написать  с  помощью  ассемблерных  вставок
операции:  создать длинное число по строке; удалить длинное число; печать  не
экран; операция указанная в задании.

  17.   Сложить  и вычесть два целых двоичных длинных числа, если  в  массиве
     хранятся двойные слова.

  18.   Умножить  два  целых двоичных длинных числа, если в массиве  хранятся
     слова.

  19.   Разделить  целое  двоичное длинное число на второе,  если  в  массиве
     хранятся байты.

  20.   Сложить  и  вычесть два целых упакованных двоично-десятичных  длинных
     числа.

  21.  Умножить целое неупакованное двоично-десятичное длинное число на другое.

  22.   Выполнить  целочисленное  деление неупакованного  двоично-десятичного
     длинного числа на другое.
